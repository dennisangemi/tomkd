#!/bin/bash


# set flag -i e -o
# -i: input file
# -o: output file

### OPTIONS ###
while getopts ":i:o:t:" flag
do
    case "${flag}" in
        i) 
            input=${OPTARG}
            ;;
        o) 
            output=${OPTARG}
            ;;
        t)
            tag=${OPTARG}
            ;;
        \?)
            echo -e "‚ùå \e[31mError: Invalid option -$OPTARG.\e[0m" 1>&2
            exit 1
            ;;
        :)
            echo -e "‚ùå \e[31mError: Option -$OPTARG requires an argument.\e[0m" 1>&2
            exit 1
            ;;
    esac
done



### CHECKING REQUIREMENTS ###

# print checking requirements message
echo -e "üîé \e[34mChecking requirements...\e[0m"

# check if imagemagick is installed
if ! command -v convert &> /dev/null
then
    echo -e "‚ùå \e[31mError: ImageMagick is not installed.\e[0m" 1>&2
    exit 1
fi

# check if pandoc is installed
if ! command -v pandoc &> /dev/null
then
    echo -e "‚ùå \e[31mError: Pandoc is not installed.\e[0m" 1>&2
    exit 1
fi

# check if mathpix mpx is installed
if ! command -v mpx &> /dev/null
then
    echo -e "‚ùå \e[31mError: Mathpix mpx is not installed.\e[0m" 1>&2
    exit 1
fi

# print success message
echo -e "‚úÖ \e[32mRequirements satisfied.\e[0m"



### INPUT ###

# if input is set
if [ -n "$input" ]; then

    # check if input file exists
    if [ ! -f "$input" ]; then
        echo -e "‚ùå \e[31mError: Input file does not exist.\e[0m" 1>&2
        exit 1
    fi

    # extract input extension
    input_ext=${input##*.}

    # if input extension is not set, print error and exit
    if [ -z "$input_ext" ] || [ "$input_ext" = "$input" ]; then
        echo -e "‚ùå \e[31mError: Input file extension not set.\e[0m Use -i option" 1>&2
        exit 1
    else
        # print input extension
        echo "Input extension: $input_ext"
        # if the input extension is not jpg or pdf, print error and exit
        if [ "$input_ext" != "jpg" ] && [ "$input_ext" != "pdf" ]; then
            echo -e "‚ùå \e[31mError: Input file extension not supported.\e[0m Use jpg or pdf" 1>&2
            exit 1
        fi
    fi

    # print input with an info message and icon emoji
    echo -e "‚ÑπÔ∏è  \e[34mInput file: $input\e[0m"

    # overwrite input with the name of the file without the extension
    input=${input%.*}
# else, if input is not set
else
    echo -e "‚ùå \e[31mError: Input file not set.\e[0m Use -i option" 1>&2
    exit 1
fi



### OUTPUT ###

# if output is set, 
if [ -n "$output" ]; then
    # extract output extension
    output_ext=${output##*.}

    # if output extension is not set, print error and exit
    if [ -z "$output_ext" ] || [ "$output_ext" = "$output" ]; then
        echo -e "‚ùå \e[31mError: Output file extension not set.\e[0m Use -o option" 1>&2
        exit 1
    else
    # (else, if output extension is set) if is not pdf print error and exit
        if [ "$output_ext" != "md" ]; then
            echo -e "‚ùå \e[31mError: Output file extension not supported.\e[0m Use md" 1>&2
            exit 1
        fi
    fi

    # print output with an info message and icon emoji
    echo -e "‚ÑπÔ∏è  \e[34mOutput file: $output (md)\e[0m"

    # overwrite output with the name of the file without the extension
    output=${output%.*}
else

    # if the input contains a path, extract the name of the file without the path
    if [ "$input" != "${input##*/}" ]; then
        output=${input##*/}
    else
        output=$input
    fi

    # print warning message
    echo -e "‚ö†Ô∏è  \e[33mWarning: Output file not set.\e[0m Using $output"
fi



### CHECKING OVERWRITING RISKS #2 ###

# if the output file exists, print error and exit
if [ -f "$output.md" ]; then
    echo -e "‚ùå \e[31mError: Output file already exists.\e[0m" 1>&2
    echo "Use -o option to set a different output filename" 1>&2
    exit 1
fi


### CONVERSION ###

# create temp directory if it does not exist
if [ ! -d "tmkdtmp" ]; then
    mkdir tmkdtmp
fi

# if the extension of the input file is .jpg
if [ "$input_ext" = "jpg" ]; then

    # move the input file to the temp directory an rename it to $output.jpg
    mv $input.jpg tmkdtmp/$output.jpg

    # convert it to .pdf with imagemagick
    convert tmkdtmp/$output.jpg tmkdtmp/$output.pdf

    # if "images" directory exists (out of the temp), move output.jpg to images directory
    if [ -d "images" ]; then
        echo "images directory exists"
        mv tmkdtmp/$output.jpg images
        echo "moved $output.jpg to images directory"
    else
        # else, create "images" directory and move output.jpg to images directory
        echo "images directory does not exist"
        mkdir images
        mv tmkdtmp/$output.jpg images
        echo "created images directory and moved $output.jpg to images directory"
    fi

    # at the end, add button to download the jpg file

else
    
    # if the extension of the input file is .pdf, sposta il file pdf nella cartella tmkdtmp
    if [ "$input_ext" = "pdf" ]; then
        mv $input.pdf tmkdtmp/$output.pdf
        echo "moved $input.pdf to tmkdtmp/$output.pdf"
    fi
    
fi

# go to temp directory
cd tmkdtmp

# arrivati a questo punto abbiamo output.pdf in tutti i casi posizionato in tmkdtmp

# print message with emoji converting to latex
echo -e "üìù \e[34mConverting pdf to latex (zip)...\e[0m"

# convert pdf to latex using mpx
mpx convert $output.pdf $output.tex

# simulo mpx
# touch $output.tex
# echo "Zipping latex file..."
# zip $output.tex.zip $output.tex
# rm $output.tex
# fine simulazione mpx

# print message with emoji unzipping the latex archive
echo -e "üì¶ \e[34mUnzipping archive with latex file...\e[0m"

# unzip the latex file
unzip -j $output.tex.zip

# individua il file .tex e rinominalo in $output.tex
mv *.tex $output.tex

# se c'√® almeno un file jpg indifferentemente dal nome, sposta tutte le immagini in una cartella images
if [ -n "$(ls *.jpg 2>/dev/null)" ]; then
    mkdir images
    mv *.jpg images
fi

# print conversion message
echo -e "üìù \e[34mConverting latex to md...\e[0m"

# convert latex to md
pandoc -s -f latex -t markdown -o $output-generated.md $output.tex

# for each image in the md, pick the path of the image in md inside parenthesis "![image](path)"
for i in $(grep -o -P '(?<=\!\[image\]\().*?(?=\))' $output-generated.md); do
    # if the image is in the images folder
    if [ -f "images/$i.jpg" ]; then
        # substitute the path of the image with the name of the file
        sed -i "s/!\[image\]($i)/![image](images\/$i.jpg)/g" $output-generated.md
        
        # print i
        # echo old $i
        # echo new images/$i.jpg
    fi
done

# print message with emoji image path fixed
echo -e "üìù \e[34mImage path fixed.\e[0m"

# if images folder exists, delete `{width="\textwidth"}`` from output-generated.md
if [ -d "images" ]; then
    sed -i 's/{width="\\textwidth"}//g' $output-generated.md
fi

# print message with emoji unuseful {width="\\textwidth"} deleted
echo -e "üìù \e[34mUnuseful {width=} deleted.\e[0m"

# print message with emoji generating md structure
echo -e "üìù \e[34mGenerating md structure...\e[0m"

# generating md template
touch $output.md
echo "---" > $output.md
echo "title: Esame del $output" >> $output.md
# if tag is set
if [ -n "$tag" ]; then
    echo -e "tags:\n    - $tag" >> $output.md
fi
echo "---" >> $output.md
echo "" >> $output.md

# concatenating generated md to template
cat $output-generated.md >> $output.md
rm $output-generated.md

# adding admonitions to md
echo "" >> $output.md
echo "??? success "Visualizza le soluzioni"
    {% include-markdown \"../placeholder/soluzioni.md\" %}

??? note "Visualizza lo svolgimento"
    {% include-markdown \"../placeholder/svolgimento.md\" %}" >> $output.md

# add new line
echo "" >> $output.md
echo "---" >> $output.md
echo "" >> $output.md

# adding download button
# if the extension of the input file is .jpg
if [ "$input_ext" = "jpg" ]; then
    echo "[:material-image: Immagine del compito](images/$output.jpg){ .md-button }" >> $output.md
else
    # if the extension of the input file is .pdf
    if [ "$input_ext" = "pdf" ]; then
        echo "[:fontawesome-regular-file-pdf: Download](pdf/$output.pdf){ .md-button }" >> $output.md
    fi
fi

# print message with emoji md formatted
echo -e "üìù \e[34m$output.md formatted.\e[0m"


### REPOSITIONING FILES ###

# mv the file md out of the temp directory
mv  $output.md ../$output.md

# if outside of the temp directory exists a directory called "tex", move the tex file to it
if [ -d "../tex" ]; then
    mv $output.tex ../tex
    echo "moved $output.tex to tex directory"
    # else, create the directory and move the tex file to it
else
    mkdir ../tex
    mv $output.tex ../tex
    echo "created tex directory and moved $output.tex to tex directory"
fi

# if the extension of the input file is .pdf 
if [ "$input_ext" = "pdf" ]; then
    # if outside of the temp directory exists a directory called "pdf", move the pdf file to it
    if [ -d "../pdf" ]; then
        mv $output.pdf ../pdf
        echo "moved $output.pdf to pdf directory"
    # else, create the directory and move the pdf file to it
    else
        mkdir ../pdf
        mv $output.pdf ../pdf
        echo "created pdf directory and moved $output.pdf to pdf directory"
    fi
fi

# if document contains images, if outside of the temp directory exists a directory called "images", move the jpg files to it
if [ -d images ]; then
    if [ -d "../images" ]; then
        mv images/*.jpg ../images
        echo "moved temp images to images directory"
    # else, create the directory and move the tex file to it
    else
        mv images ../images
        echo "created new images directory. moved temp images to images directory"
    fi
fi


### CLEANING ###

# esci dalla cartella tmkdtmp
cd ..

# if tmkdtmp exists, remove it
if [ -d tmkdtmp ]; then
    rm -r tmkdtmp
fi

# print success message with check emoji
echo -e "‚úÖ \e[32mSuccess: $output.md created\e[0m"

# print the list of the file produced with emoji and path
echo -e "üìÅ \e[34mFiles produced:\e[0m"
echo -e "üìÑ \e[34m$output.md\e[0m"
echo -e "üìÑ \e[34mtex/$output.tex\e[0m"
if [ "$input_ext" = "pdf" ]; then
    echo -e "üìÑ \e[34mpdf/$output.pdf\e[0m"
else
    echo -e "üìÑ \e[34mimages/$output.jpg\e[0m"
fi